<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>CFEngine</title>
	<link>https://cfengine.com</link>
	<description>Automate large-scale, complex and mission critical IT infrastructure with CFEngine</description>
	<pubDate>Thu, 29 Oct 2020 15:52:50 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://cfengine.com</wp:base_site_url>
	<wp:base_blog_url>https://cfengine.com</wp:base_blog_url>

		<wp:author><wp:author_id>59</wp:author_id><wp:author_login><![CDATA[u999]]></wp:author_login><wp:author_email><![CDATA[ole@northern.tech]]></wp:author_email><wp:author_display_name><![CDATA[Ole Herman Elgesem]]></wp:author_display_name><wp:author_first_name><![CDATA[Ole]]></wp:author_first_name><wp:author_last_name><![CDATA[Elgesem]]></wp:author_last_name></wp:author>

				
	

		<item>
		<title>
				CFEngine 3.16 - Compliance		</title>
		<link>https://cfengine.com/company/blog-detail/cfengine-3-16-compliance/</link>
		<pubDate>Thu, 25 Jun 2020 14:32:17 +0000</pubDate>
		<dc:creator><![CDATA[u999]]></dc:creator>
		<guid isPermaLink="false">https://cfengine.com/?post_type=pt_blog&#038;p=10071</guid>
		<description></description>
		<content:encoded>
				<![CDATA[Today we announce the newest additions to CFEngine. CFEngine 3.16 brings several improvements, bug fixes, and new features. The theme for this release has been compliance, and it notably includes a new category of reports for proving compliance to regulation and other compliance frameworks in high level, easy to read reports.

If you are interested to learn more about CFEngine, schedule training, or hear about pricing options, feel free to <a href="https://cfengine.com/engage/contact/">reach out to us!</a>
<h1>What's new</h1>
<h2>Compliance reports (Beta)</h2>
Compliance reports allow you to implement internal or regulatory frameworks as a list of checks which have to pass on all or a subset of your hosts. The system is very flexible, allowing you to implement checks using Inventory values, software updates, or even custom SQL queries. Once the report is completed, the results can be exported to PDF, or scheduled to run at a fixed interval, for example every week. Different compliance reports can be set up for various stakeholders in your organization, and automated e-mails with PDFs can bring this valuable information to people/departments which don't use Mission Portal directly. This feature is still in beta, and a lot of the UI will change, but we are excited to show it to you and start getting some feedback on it, so it will be in a great shape for the next LTS release.

[caption id="attachment_10076" align="alignnone" width="564"]<img class="wp-image-10076 size-medium" src="https://cfengine.com/wp-content/uploads/2020/06/Mission_Portal_Compliance-Infrastructure-compliance-564x800.png" alt="" width="564" height="800" /> Compliance report (beta)[/caption]
<h2>Secret Encryption</h2>
A new tool has been introduced, <code>cf-secret</code>, which allows you to encrypt files for specific hosts in your infrastructure.
It is open-source, available in both community and enterprise packages, and can be used from policy or as a stand-alone tool.

<img class="alignnone size-full wp-image-10077" src="https://cfengine.com/wp-content/uploads/2020/06/Screenshot-2020-06-25-at-09.18.17.png" alt="" width="680" height="92" />
<a href="https://cfengine.com/company/blog-detail/cf-secret/">Read more about <code>cf-secret</code> here.</a>
<h2>Detailed host and license counts</h2>
Mission Portal now gives you a detailed overview of your hosts, including the license count, number of recently deleted hosts, as well as the total number of hosts before RBAC filtering is applied. This should clear up some confusion in large infrastructures, especially when you are approaching the license count, and if you decommission hosts frequently. (Unfiltered host count is a separate control in our Role Based Access Control (RBAC) system, so you can grant or remove access to it for any user/role).

[caption id="attachment_10075" align="alignnone" width="375"]<img class="wp-image-10075 size-full" src="https://cfengine.com/wp-content/uploads/2020/06/Screenshot-2020-06-24-at-12.10.23.png" alt="" width="375" height="461" /> Detailed breakdown of license information and host counts[/caption]
<h2>New version macros</h2>
From CFEngine 3.16 and onward, you can more easily target specific CFEngine versions within the policy language. Previously, you could use the <code>minimum_version</code> macro to avoid using newer syntax and features on older versions that don't support it. However, there was no obvious approach to where you would put the alternative (the policy which you want to run on older versions only). For this reason and to allow greater flexibility to policy writers, we have introduced a few new macros:
<ul>
 	<li><code>maximum_version</code></li>
 	<li><code>else</code></li>
 	<li><code>at_version</code></li>
 	<li><code>between_versions</code></li>
 	<li><code>before_version</code></li>
 	<li><code>after_version</code></li>
</ul>
<a href="https://docs.cfengine.com/docs/3.16/reference-macros.html">Read more about all these macros in the documentation</a>.
<h2>New functions</h2>
CFEngine 3.16.0 introduces 9 new functions. To complement the version macros, which function at a parsing level, we also now have functions for making decisions based on the version of the agent from the policy.
<ul>
 	<li><code><a href="https://docs.cfengine.com/docs/3.16/reference-functions-cf_version_after.html">cf_version_after()</a></code></li>
 	<li><code><a href="https://docs.cfengine.com/docs/3.16/reference-functions-cf_version_at.html">cf_version_at()</a></code></li>
 	<li><code><a href="https://docs.cfengine.com/docs/3.16/reference-functions-cf_version_before.html">cf_version_before()</a></code></li>
 	<li><code><a href="https://docs.cfengine.com/docs/3.16/reference-functions-cf_version_between.html">cf_version_between()</a></code></li>
 	<li><code><a href="https://docs.cfengine.com/docs/3.16/reference-functions-cf_version_maximum.html">cf_version_maximum()</a></code></li>
 	<li><code><a href="https://docs.cfengine.com/docs/3.16/reference-functions-cf_version_minimum.html">cf_version_minimum()</a></code></li>
</ul>
A new utility function to strip leading and trailing whitespace was added.
<ul>
 	<li><a href="https://docs.cfengine.com/docs/3.16/reference-functions-string_trim.html"><code>string_trim()</code></a></li>
</ul>
And two new data validation functions were added for making decisions based on data validity.
<ul>
 	<li><code><a href="https://docs.cfengine.com/docs/3.16/reference-functions-validdata.html">validdata()</a></code><a href="https://docs.cfengine.com/docs/3.16/reference-functions-validdata.html"><code></code></a></li>
 	<li><a href="https://docs.cfengine.com/docs/3.16/reference-functions-validjson.html"><code>validjson()</code></a></li>
</ul>
<h2>New files promise type attribute</h2>
The new content attribute for <code>files</code> type promises make it more clear and concise to promise the full content of a file.
<div id="text-1" class="outline-text-2">
<div class="org-src-container">

<label class="org-src-name"><span class="listing-number">An example</span>Â illustrating files promise content attribute</label>
<pre class="src src-cfengine3"><span style="color: #4f97d7;">bundle</span> <span style="color: #a45bad;">agent</span> <span style="color: #bc6ec5; font-weight: bold;">example_file_content</span>
<span style="color: #2aa1ae;"># </span><span style="color: #2aa1ae;">@brief Example showing files content</span>
<span style="color: #4f97d7;">{</span>
  <span style="color: #4f97d7;">vars</span>:
      <span style="color: #2d9574;">"my_content"</span>
        <span style="color: #ce537a; font-weight: bold;">string</span> =&gt; <span style="color: #2d9574;">"Hello from var!"</span>;

  <span style="color: #4f97d7;">files</span>:
      <span style="color: #2d9574;">"/tmp/hello_string"</span>
        create =&gt; <span style="color: #2d9574;">"true"</span>,
        content =&gt; <span style="color: #2d9574;">"Hello from string!"</span>;

      <span style="color: #2d9574;">"/tmp/hello_var"</span>
        create =&gt; <span style="color: #2d9574;">"true"</span>,
        content =&gt; <span style="color: #2d9574;">"$(my_content)"</span>;

  <span style="color: #4f97d7;">reports</span>:
      <span style="color: #2d9574;">"/tmp/hello_string"</span>
        printfile =&gt; cat<span style="color: #bc6ec5;">(</span> $<span style="color: #2d9574;">(</span><span style="color: #7590db;">this.promiser</span><span style="color: #2d9574;">)</span> <span style="color: #bc6ec5;">)</span>;
      <span style="color: #2d9574;">"/tmp/hello_var"</span>
        printfile =&gt; cat<span style="color: #bc6ec5;">(</span> $<span style="color: #2d9574;">(</span><span style="color: #7590db;">this.promiser</span><span style="color: #2d9574;">)</span> <span style="color: #bc6ec5;">)</span>;
<span style="color: #4f97d7;">}</span>

<span style="color: #4f97d7;">body</span> <span style="color: #a45bad;">printfile</span> <span style="color: #bc6ec5; font-weight: bold;">cat</span><span style="color: #4f97d7;">(</span><span style="color: #7590db;">file</span><span style="color: #4f97d7;">)</span>
<span style="color: #2aa1ae;"># </span><span style="color: #2aa1ae;">@brief Report the contents of a file</span>
<span style="color: #2aa1ae;"># </span><span style="color: #2aa1ae;">@param file The full path of the file to report</span>
<span style="color: #4f97d7;">{</span>
        file_to_print =&gt; <span style="color: #2d9574;">"$(file)"</span>;
        number_of_lines =&gt; <span style="color: #2d9574;">"inf"</span>;
<span style="color: #4f97d7;">}</span>

<span style="color: #4f97d7;">bundle</span> <span style="color: #a45bad;">agent</span> <span style="color: #bc6ec5; font-weight: bold;">__main__</span>
<span style="color: #4f97d7;">{</span>
  <span style="color: #4f97d7;">methods</span>: <span style="color: #2d9574;">"example_file_content"</span>;
<span style="color: #4f97d7;">}</span>
</pre>
</div>
Here we can see the results of executing the example above.
<pre class="example"># cf-agent --no-lock --file /tmp/example_file_content.cf
R: /tmp/hello_string
R: Hello from string!
R: /tmp/hello_var
R: Hello from var!
</pre>
</div>
You can find the <a href="https://docs.cfengine.com/docs/3.16/reference-promise-types-files.html#content">documentation about the content attribute here</a>.
<h1>Changelogs</h1>
We have made a lot of smaller improvements, dependency updates, and bug fixes which would not fit into a single blog post. Some of these are brand new to CFEngine 3.16, while some we were also included in the <a href="https://cfengine.com/company/blog-detail/cfengine-3-12-5-and-3-15-2-released/">recent 3.12.5 and 3.15.2 releases</a>. You can read all the details in our changelogs:
<ul>
 	<li><a href="https://docs.cfengine.com/docs/3.16/guide-latest-release-whatsnew-changelog-core.html">Core</a></li>
 	<li><a href="https://docs.cfengine.com/docs/3.16/guide-latest-release-whatsnew-changelog-enterprise.html">Enterprise</a></li>
 	<li><a href="https://docs.cfengine.com/docs/3.16/guide-latest-release-whatsnew-changelog-masterfiles-policy-framework.html">Masterfiles</a></li>
</ul>
<h1>Contributing</h1>
We are always looking for new <strong>contributions to CFEngine!</strong> Are you unsure how to get started? Please check out our <a href="https://github.com/cfengine/core/blob/master/CONTRIBUTING.md">contributing guide</a>Â in addition to the following suggestions.
<ul>
 	<li>SendÂ <a href="https://docs.cfengine.com/">documentation</a>Â updatesÂ as pull requests toÂ <a href="https://github.com/cfengine/documentation">cfengine/documentation</a>.</li>
 	<li>Search forÂ <a href="https://tracker.mender.io/issues/?jql=project%20%3D%20CFE%20AND%20status%20in%20(Open%2C%20%22To%20Do%22)%20AND%20labels%20in%20(easy%2C%20help_wanted)">issues labeled easy or help_wanted that are OPEN or TODO</a>Â that are good candidates for new contributors toÂ <a href="https://github.com/cfengine/core">cfengine/core</a>Â orÂ <a href="https://github.com/cfengine/masterfiles">cfengine/masterfiles</a>.</li>
 	<li>Fix issues pointed out by <a href="https://lgtm.com/projects/g/cfengine/core/alerts/">code analysis</a>.</li>
</ul>]]>		</content:encoded>
		<excerpt:encoded>
				<![CDATA[]]>		</excerpt:encoded>
		<wp:post_id>10071</wp:post_id>
		<wp:post_date><![CDATA[2020-06-25 16:32:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-25 14:32:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cfengine-3-16-compliance]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[pt_blog]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[50]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>
				Introducing cf-remote: Tooling to deploy CFEngine		</title>
		<link>https://cfengine.com/company/blog-detail/cf-remote/</link>
		<pubDate>Tue, 30 Apr 2019 14:03:47 +0000</pubDate>
		<dc:creator><![CDATA[u999]]></dc:creator>
		<guid isPermaLink="false">https://cfengine.com/?post_type=pt_blog&#038;p=9583</guid>
		<description></description>
		<content:encoded>
				<![CDATA[About a year ago, I wrote a small python script to automate installing and bootstrapping CFEngine on virtual machines in AWS. It had some hard coded IP addresses that I needed to update when I spawned new hosts, but other than that, it worked well. During manual testing, it saved me a lot of time instead of having to do things manually.

Deploying CFEngine normally consists of these steps:
<ol class="incremental">
 	<li>Determine what CFEngine package to use.</li>
 	<li>Download appropriate package if you haven't already - <code>curl</code>.</li>
 	<li>Copy the package to the host - <code>scp</code>.</li>
 	<li>Log into the host - <code>ssh</code>.</li>
 	<li>Install the package - <code>rpm</code> / <code>dpkg</code>.</li>
 	<li>Bootstrap CFEngine - <code>cf-agent -B</code>.</li>
</ol>
At a company hackathon I decided to make my script into something better, something that would be useful to my colleagues, and maybe even CFEngine users in general. Enter <code>cf-remote</code>.
<h2 id="info">Info</h2>
<code>cf-remote</code> can be used to show information about a system before installing CFEngine. The <code>info</code> command logs into the system, runs a few commands and parses <a href="https://www.freedesktop.org/software/systemd/man/os-release.html"><code>/etc/os-release</code></a> to present relevant information:
<pre><code>$ cf-remote info -H 34.252.28.73

ec2-user@34.252.28.73
OS            : rhel (fedora)
Architecture  : x86_64
CFEngine      : Not installed
Policy server : None
Binaries      : rpm, yum
</code></pre>
The <code>cf-remote</code> command line tool is written in Python, and uses <a href="http://www.fabfile.org/">Fabric</a> to log into the system via SSH. (Add <code>--log-level debug</code> to see all commands <code>cf-remote</code> runs). Note that there are almost no dependencies on the target system. You only need ssh access and a shell which can perform basic UNIX commands like <code>ls</code>, <code>cat</code>, <code>which</code>.

The printout shows that it's a Red Hat machine, and CFEngine is not installed yet.
<h2 id="install-and-bootstrap">Install and bootstrap</h2>
<code>cf-remote</code> can install CFEngine on the system above. The only thing you really need to specify is IP address(es):
<pre><code>$ cf-remote install --hub 34.252.28.73 --bootstrap 172.31.30.237
</code></pre>
Here is the output from the example above:
<pre><code>$ cf-remote install --hub 34.252.28.73 --bootstrap 172.31.30.237

ec2-user@34.252.28.73
OS            : rhel (fedora)
Architecture  : x86_64
CFEngine      : Not installed
Policy server : None
Binaries      : rpm, yum

Package already downloaded: '/Users/olehermanse/.cfengine/cf-remote/packages/cfengine-nova-hub-3.12.1-1.x86_64.rpm'
Copying: '/Users/olehermanse/.cfengine/cf-remote/packages/cfengine-nova-hub-3.12.1-1.x86_64.rpm' to '34.252.28.73'
Installing: 'cfengine-nova-hub-3.12.1-1.x86_64.rpm' on '34.252.28.73'
CFEngine 3.12.1 was successfully installed on '34.252.28.73'
Bootstrapping: '34.252.28.73' -&gt; '172.31.30.237'
Bootstrap successful: '34.252.28.73' -&gt; '172.31.30.237'
</code></pre>
We can guess the username and CFEngine version if not specified. Many hosts can be specified in a single command:
<pre><code>$ cf-remote install --hub 34.252.28.73 --bootstrap 172.31.30.237 --clients 52.212.51.201,52.212.51.202,52.212.51.203
</code></pre>
Or using a newline delimited file:
<pre><code>$ cat ./clients
52.212.51.201
52.212.51.202
52.212.51.203
$ cf-remote install --hub 34.252.28.73 --bootstrap 172.31.30.237 --clients ./clients
</code></pre>
<h2 id="other-useful-commands">Other useful commands</h2>
The tooling includes a few other useful utilities. Some of these things can be done in CFEngine policy, but <code>cf-remote</code> doesn't assume that CFEngine is installed. Thus, these commands can be useful both before and after installing CFEngine.
<h3 id="file-copy">File copy</h3>
The <code>scp</code> command can be used to transfer files to the host.
<pre><code>$ echo "Hello, world" &gt; txt
$ cf-remote -H 34.252.28.73 scp txt
Copying: 'txt' to '34.252.28.73'
</code></pre>
The destination defaults to the home folder of the SSH user (<code>/home/ec2-user/txt</code> in this example). The command doesn't actually use an <code>scp</code> executable, but Fabric's <code>Connection.put()</code>.
<h3 id="arbitrary-command-execution">Arbitrary command execution</h3>
We can also run commands as if we were logged in via ssh:
<pre><code>$ cf-remote -H 34.252.28.73 run "cat txt"
34.252.28.73:    'cat txt' -&gt; 'Hello, world'
</code></pre>
This is especially useful to run commands on many hosts. <code>-H</code> accepts a comma separated list or a path to a file (beginning with <code>./</code>, <code>/</code>, <code>../</code> or <code>~/</code>).
<h2 id="videos">Videos</h2>
<code>cf-remote</code> was introduced, with some live demos, in my talk at <a href="https://cfgmgmtcamp.eu/">CfgMgmtCamp</a> 2019. The video recording is available on YouTube (<code>cf-remote</code> part starts at <a href="https://www.youtube.com/watch?v=q50_QTd1AN4&amp;t=20m51s">20:51</a>):

<a href="https://www.youtube.com/watch?v=q50_QTd1AN4">https://www.youtube.com/watch?v=q50_QTd1AN4</a>

We also made some videos showing how to install and use <code>cf-remote</code>:

<a href="https://youtu.be/cEipwS4SePc">Install cf-remote</a>

<a href="https://youtu.be/l4kJ4qAvT1I">Deploying CFEngine using cf-remote</a>
<h2 id="getting-started">Getting started</h2>
The tool is completely open source, and part of the <a href="https://github.com/cfengine/core">CFEngine core repository</a>:

<a href="https://github.com/cfengine/core/tree/master/contrib/cf-remote">https://github.com/cfengine/core/tree/master/contrib/cf-remote</a>

The README has installation instructions. It should work on any system with curl, Python(3), <a href="http://www.fabfile.org/">Fabric</a>, and <a href="http://docs.python-requests.org/en/master/">Requests</a>. We've tested it on Linux(Fedora) and OS X. Currently, RHEL and Ubuntu targets are supported. Debian, Fedora, and CentOS should also work as they use <code>dpkg</code> / <code>rpm</code>. The target must be running an SSH server with your key in <code>authorized_keys</code>, so Fabric can log in.
<h3 id="contributing">Contributing</h3>
Anyone can contribute to <code>cf-remote</code>, we have a curated list of tickets to pick up here:

<a href="https://tracker.mender.io/issues/?filter=11704">https://tracker.mender.io/issues/?filter=11704</a>

Additional platform support (beyond dpkg and rpm) and parallellized installation are good next features.]]>		</content:encoded>
		<excerpt:encoded>
				<![CDATA[]]>		</excerpt:encoded>
		<wp:post_id>9583</wp:post_id>
		<wp:post_date><![CDATA[2019-04-30 16:03:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-30 14:03:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cf-remote]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[pt_blog]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[59]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_eed3100fb8b6d4fdd6515f05203f9784]]></wp:meta_key>
		<wp:meta_value><![CDATA[<iframe width="900" height="506" src="https://www.youtube.com/embed/q50_QTd1AN4?start=1251&feature=oembed" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_eed3100fb8b6d4fdd6515f05203f9784]]></wp:meta_key>
		<wp:meta_value><![CDATA[1553691547]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_2fe35fc6a5de4fd8ad4a8138ddf64fe8]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_0cd652173238683f9ed907c8a0b815dd]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							</item>
				</channel>
</rss>
	
