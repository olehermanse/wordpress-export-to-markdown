{
  "meta": {
    "id": "9583",
    "slug": "cf-remote",
    "link": "https://cfengine.com/company/blog-detail/cf-remote/",
    "imageUrls": []
  },
  "frontmatter": {
    "author": "Ole Herman Elgesem",
    "title": "Introducing cf-remote: Tooling to deploy CFEngine",
    "date": "2019-04-30T14:03:47.000Z",
    "categories": [],
    "tags": [],
    "aliases": [
      "/company/blog-detail/cf-remote/"
    ],
    "original_url": "https://cfengine.com/company/blog-detail/cf-remote/"
  },
  "content": "About a year ago, I wrote a small python script to automate installing and bootstrapping CFEngine on virtual machines in AWS. It had some hard coded IP addresses that I needed to update when I spawned new hosts, but other than that, it worked well. During manual testing, it saved me a lot of time instead of having to do things manually.\n\nDeploying CFEngine normally consists of these steps:\n\n1. Determine what CFEngine package to use.\n2. Download appropriate package if you haven't already - `curl`.\n3. Copy the package to the host - `scp`.\n4. Log into the host - `ssh`.\n5. Install the package - `rpm` / `dpkg`.\n6. Bootstrap CFEngine - `cf-agent -B`.\n\nAt a company hackathon I decided to make my script into something better, something that would be useful to my colleagues, and maybe even CFEngine users in general. Enter `cf-remote`.\n\n## Info\n\n`cf-remote` can be used to show information about a system before installing CFEngine. The `info` command logs into the system, runs a few commands and parses [`/etc/os-release`](https://www.freedesktop.org/software/systemd/man/os-release.html) to present relevant information:\n\n```\n$ cf-remote info -H 34.252.28.73\n\nec2-user@34.252.28.73\nOS            : rhel (fedora)\nArchitecture  : x86_64\nCFEngine      : Not installed\nPolicy server : None\nBinaries      : rpm, yum\n```\n\nThe `cf-remote` command line tool is written in Python, and uses [Fabric](http://www.fabfile.org/) to log into the system via SSH. (Add `--log-level debug` to see all commands `cf-remote` runs). Note that there are almost no dependencies on the target system. You only need ssh access and a shell which can perform basic UNIX commands like `ls`, `cat`, `which`.\n\nThe printout shows that it's a Red Hat machine, and CFEngine is not installed yet.\n\n## Install and bootstrap\n\n`cf-remote` can install CFEngine on the system above. The only thing you really need to specify is IP address(es):\n\n```\n$ cf-remote install --hub 34.252.28.73 --bootstrap 172.31.30.237\n```\n\nHere is the output from the example above:\n\n```\n$ cf-remote install --hub 34.252.28.73 --bootstrap 172.31.30.237\n\nec2-user@34.252.28.73\nOS            : rhel (fedora)\nArchitecture  : x86_64\nCFEngine      : Not installed\nPolicy server : None\nBinaries      : rpm, yum\n\nPackage already downloaded: '/Users/olehermanse/.cfengine/cf-remote/packages/cfengine-nova-hub-3.12.1-1.x86_64.rpm'\nCopying: '/Users/olehermanse/.cfengine/cf-remote/packages/cfengine-nova-hub-3.12.1-1.x86_64.rpm' to '34.252.28.73'\nInstalling: 'cfengine-nova-hub-3.12.1-1.x86_64.rpm' on '34.252.28.73'\nCFEngine 3.12.1 was successfully installed on '34.252.28.73'\nBootstrapping: '34.252.28.73' -> '172.31.30.237'\nBootstrap successful: '34.252.28.73' -> '172.31.30.237'\n```\n\nWe can guess the username and CFEngine version if not specified. Many hosts can be specified in a single command:\n\n```\n$ cf-remote install --hub 34.252.28.73 --bootstrap 172.31.30.237 --clients 52.212.51.201,52.212.51.202,52.212.51.203\n```\n\nOr using a newline delimited file:\n\n```\n$ cat ./clients\n52.212.51.201\n52.212.51.202\n52.212.51.203\n$ cf-remote install --hub 34.252.28.73 --bootstrap 172.31.30.237 --clients ./clients\n```\n\n## Other useful commands\n\nThe tooling includes a few other useful utilities. Some of these things can be done in CFEngine policy, but `cf-remote` doesn't assume that CFEngine is installed. Thus, these commands can be useful both before and after installing CFEngine.\n\n### File copy\n\nThe `scp` command can be used to transfer files to the host.\n\n```\n$ echo \"Hello, world\" > txt\n$ cf-remote -H 34.252.28.73 scp txt\nCopying: 'txt' to '34.252.28.73'\n```\n\nThe destination defaults to the home folder of the SSH user (`/home/ec2-user/txt` in this example). The command doesn't actually use an `scp` executable, but Fabric's `Connection.put()`.\n\n### Arbitrary command execution\n\nWe can also run commands as if we were logged in via ssh:\n\n```\n$ cf-remote -H 34.252.28.73 run \"cat txt\"\n34.252.28.73:    'cat txt' -> 'Hello, world'\n```\n\nThis is especially useful to run commands on many hosts. `-H` accepts a comma separated list or a path to a file (beginning with `./`, `/`, `../` or `~/`).\n\n## Videos\n\n`cf-remote` was introduced, with some live demos, in my talk at [CfgMgmtCamp](https://cfgmgmtcamp.eu/) 2019. The video recording is available on YouTube (`cf-remote` part starts at [20:51](https://www.youtube.com/watch?v=q50_QTd1AN4&t=20m51s)):\n\n[https://www.youtube.com/watch?v=q50\\_QTd1AN4](https://www.youtube.com/watch?v=q50_QTd1AN4)\n\nWe also made some videos showing how to install and use `cf-remote`:\n\n[Install cf-remote](https://youtu.be/cEipwS4SePc)\n\n[Deploying CFEngine using cf-remote](https://youtu.be/l4kJ4qAvT1I)\n\n## Getting started\n\nThe tool is completely open source, and part of the [CFEngine core repository](https://github.com/cfengine/core):\n\n[https://github.com/cfengine/core/tree/master/contrib/cf-remote](https://github.com/cfengine/core/tree/master/contrib/cf-remote)\n\nThe README has installation instructions. It should work on any system with curl, Python(3), [Fabric](http://www.fabfile.org/), and [Requests](http://docs.python-requests.org/en/master/). We've tested it on Linux(Fedora) and OS X. Currently, RHEL and Ubuntu targets are supported. Debian, Fedora, and CentOS should also work as they use `dpkg` / `rpm`. The target must be running an SSH server with your key in `authorized_keys`, so Fabric can log in.\n\n### Contributing\n\nAnyone can contribute to `cf-remote`, we have a curated list of tickets to pick up here:\n\n[https://tracker.mender.io/issues/?filter=11704](https://tracker.mender.io/issues/?filter=11704)\n\nAdditional platform support (beyond dpkg and rpm) and parallellized installation are good next features.",
  "contentHtml": "About a year ago, I wrote a small python script to automate installing and bootstrapping CFEngine on virtual machines in AWS. It had some hard coded IP addresses that I needed to update when I spawned new hosts, but other than that, it worked well. During manual testing, it saved me a lot of time instead of having to do things manually.\r\n\r\nDeploying CFEngine normally consists of these steps:\r\n<ol class=\"incremental\">\r\n \t<li>Determine what CFEngine package to use.</li>\r\n \t<li>Download appropriate package if you haven't already - <code>curl</code>.</li>\r\n \t<li>Copy the package to the host - <code>scp</code>.</li>\r\n \t<li>Log into the host - <code>ssh</code>.</li>\r\n \t<li>Install the package - <code>rpm</code> / <code>dpkg</code>.</li>\r\n \t<li>Bootstrap CFEngine - <code>cf-agent -B</code>.</li>\r\n</ol>\r\nAt a company hackathon I decided to make my script into something better, something that would be useful to my colleagues, and maybe even CFEngine users in general. Enter <code>cf-remote</code>.\r\n<h2 id=\"info\">Info</h2>\r\n<code>cf-remote</code> can be used to show information about a system before installing CFEngine. The <code>info</code> command logs into the system, runs a few commands and parses <a href=\"https://www.freedesktop.org/software/systemd/man/os-release.html\"><code>/etc/os-release</code></a> to present relevant information:\r\n<pre><code>$ cf-remote info -H 34.252.28.73\r\n\r\nec2-user@34.252.28.73\r\nOS            : rhel (fedora)\r\nArchitecture  : x86_64\r\nCFEngine      : Not installed\r\nPolicy server : None\r\nBinaries      : rpm, yum\r\n</code></pre>\r\nThe <code>cf-remote</code> command line tool is written in Python, and uses <a href=\"http://www.fabfile.org/\">Fabric</a> to log into the system via SSH. (Add <code>--log-level debug</code> to see all commands <code>cf-remote</code> runs). Note that there are almost no dependencies on the target system. You only need ssh access and a shell which can perform basic UNIX commands like <code>ls</code>, <code>cat</code>, <code>which</code>.\r\n\r\nThe printout shows that it's a Red Hat machine, and CFEngine is not installed yet.\r\n<h2 id=\"install-and-bootstrap\">Install and bootstrap</h2>\r\n<code>cf-remote</code> can install CFEngine on the system above. The only thing you really need to specify is IP address(es):\r\n<pre><code>$ cf-remote install --hub 34.252.28.73 --bootstrap 172.31.30.237\r\n</code></pre>\r\nHere is the output from the example above:\r\n<pre><code>$ cf-remote install --hub 34.252.28.73 --bootstrap 172.31.30.237\r\n\r\nec2-user@34.252.28.73\r\nOS            : rhel (fedora)\r\nArchitecture  : x86_64\r\nCFEngine      : Not installed\r\nPolicy server : None\r\nBinaries      : rpm, yum\r\n\r\nPackage already downloaded: '/Users/olehermanse/.cfengine/cf-remote/packages/cfengine-nova-hub-3.12.1-1.x86_64.rpm'\r\nCopying: '/Users/olehermanse/.cfengine/cf-remote/packages/cfengine-nova-hub-3.12.1-1.x86_64.rpm' to '34.252.28.73'\r\nInstalling: 'cfengine-nova-hub-3.12.1-1.x86_64.rpm' on '34.252.28.73'\r\nCFEngine 3.12.1 was successfully installed on '34.252.28.73'\r\nBootstrapping: '34.252.28.73' -&gt; '172.31.30.237'\r\nBootstrap successful: '34.252.28.73' -&gt; '172.31.30.237'\r\n</code></pre>\r\nWe can guess the username and CFEngine version if not specified. Many hosts can be specified in a single command:\r\n<pre><code>$ cf-remote install --hub 34.252.28.73 --bootstrap 172.31.30.237 --clients 52.212.51.201,52.212.51.202,52.212.51.203\r\n</code></pre>\r\nOr using a newline delimited file:\r\n<pre><code>$ cat ./clients\r\n52.212.51.201\r\n52.212.51.202\r\n52.212.51.203\r\n$ cf-remote install --hub 34.252.28.73 --bootstrap 172.31.30.237 --clients ./clients\r\n</code></pre>\r\n<h2 id=\"other-useful-commands\">Other useful commands</h2>\r\nThe tooling includes a few other useful utilities. Some of these things can be done in CFEngine policy, but <code>cf-remote</code> doesn't assume that CFEngine is installed. Thus, these commands can be useful both before and after installing CFEngine.\r\n<h3 id=\"file-copy\">File copy</h3>\r\nThe <code>scp</code> command can be used to transfer files to the host.\r\n<pre><code>$ echo \"Hello, world\" &gt; txt\r\n$ cf-remote -H 34.252.28.73 scp txt\r\nCopying: 'txt' to '34.252.28.73'\r\n</code></pre>\r\nThe destination defaults to the home folder of the SSH user (<code>/home/ec2-user/txt</code> in this example). The command doesn't actually use an <code>scp</code> executable, but Fabric's <code>Connection.put()</code>.\r\n<h3 id=\"arbitrary-command-execution\">Arbitrary command execution</h3>\r\nWe can also run commands as if we were logged in via ssh:\r\n<pre><code>$ cf-remote -H 34.252.28.73 run \"cat txt\"\r\n34.252.28.73:    'cat txt' -&gt; 'Hello, world'\r\n</code></pre>\r\nThis is especially useful to run commands on many hosts. <code>-H</code> accepts a comma separated list or a path to a file (beginning with <code>./</code>, <code>/</code>, <code>../</code> or <code>~/</code>).\r\n<h2 id=\"videos\">Videos</h2>\r\n<code>cf-remote</code> was introduced, with some live demos, in my talk at <a href=\"https://cfgmgmtcamp.eu/\">CfgMgmtCamp</a> 2019. The video recording is available on YouTube (<code>cf-remote</code> part starts at <a href=\"https://www.youtube.com/watch?v=q50_QTd1AN4&amp;t=20m51s\">20:51</a>):\r\n\r\n<a href=\"https://www.youtube.com/watch?v=q50_QTd1AN4\">https://www.youtube.com/watch?v=q50_QTd1AN4</a>\r\n\r\nWe also made some videos showing how to install and use <code>cf-remote</code>:\r\n\r\n<a href=\"https://youtu.be/cEipwS4SePc\">Install cf-remote</a>\r\n\r\n<a href=\"https://youtu.be/l4kJ4qAvT1I\">Deploying CFEngine using cf-remote</a>\r\n<h2 id=\"getting-started\">Getting started</h2>\r\nThe tool is completely open source, and part of the <a href=\"https://github.com/cfengine/core\">CFEngine core repository</a>:\r\n\r\n<a href=\"https://github.com/cfengine/core/tree/master/contrib/cf-remote\">https://github.com/cfengine/core/tree/master/contrib/cf-remote</a>\r\n\r\nThe README has installation instructions. It should work on any system with curl, Python(3), <a href=\"http://www.fabfile.org/\">Fabric</a>, and <a href=\"http://docs.python-requests.org/en/master/\">Requests</a>. We've tested it on Linux(Fedora) and OS X. Currently, RHEL and Ubuntu targets are supported. Debian, Fedora, and CentOS should also work as they use <code>dpkg</code> / <code>rpm</code>. The target must be running an SSH server with your key in <code>authorized_keys</code>, so Fabric can log in.\r\n<h3 id=\"contributing\">Contributing</h3>\r\nAnyone can contribute to <code>cf-remote</code>, we have a curated list of tickets to pick up here:\r\n\r\n<a href=\"https://tracker.mender.io/issues/?filter=11704\">https://tracker.mender.io/issues/?filter=11704</a>\r\n\r\nAdditional platform support (beyond dpkg and rpm) and parallellized installation are good next features."
}